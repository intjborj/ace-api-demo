

Guide for implementing Versioning to our domain using JAVERS

Note: We will not be tracking object creation because it can be easily got from created_by... this is also to
save space.... but if you wanted to track this just specify
javers.newObjectSnapshot=true


======1.) Applying on Domain with RepositoryInterfaces(this should also track Rest updates)=======

@JaversSpringDataAuditable
interface PatientRepository extends JpaRepository<Patient, UUID> {

}


========2.) Applying on Domain inside AbstractDaoService==============================

@Service
@GraphQLApi
class ChartOfAccountServices extends AbstractDaoServiceJavers<ChartOfAccount> {

	 ...


	    @GraphQLQuery(name="coaSnapshotHistory")
     	List<Hisd3EntityVersionInfoHistory> coaSnapshotHistory(@GraphQLArgument(name = "coaId") UUID coaId) {
     		return getSnapshotHistory(getCoaById(coaId))
     	}


}

!!!!!!!!!!! VERY IMPORTANT !!!!!!!!!!!!!!!!
=====3.) Lets ignore child records changes   ... It can hang Spring Data Rest  so follow instructions see Case.groovy Billing.groovy

@DiffIgnore
@OneToMany(fetch = FetchType.LAZY, mappedBy = "billing")
List<BillingItem> billingItemList

 ==== Also ignore Blob or Array types
  @DiffIgnore
  @Basic(fetch = FetchType.LAZY)
  @Column(name = "picture",columnDefinition = "bytea")
  byte[] picture
 ====== AutoGenerated Values can also be ignored
 @DiffIgnore
 @GraphQLQuery
 @Column(name = "case_no", columnDefinition = "varchar")
 String caseNo

 ====== Foreign Keys that does not change should also be ignored

@DiffIgnore
@NotFound(action = NotFoundAction.IGNORE)
@ManyToOne(fetch = FetchType.LAZY)
@JoinColumn(name = "patient", referencedColumnName = "id")
Patient patient


===== Other Foreign keys should be Shallow Referenced

 @ShallowReference
 @NotFound(action = NotFoundAction.IGNORE)
 @ManyToOne(fetch = FetchType.LAZY)
 @JoinColumn(name = "attending_physician", referencedColumnName = "id")
 Employee attendingPhysician



=== To allow HISD3 to resolve @ShallowReference implement a JaversResolvable to the entity

class Room extends AbstractAuditingEntity implements JaversResolvable{

...

   @Override
	String resolveEntityForJavers() {
		return roomBedNo
	}
}
=====3.) Querying Changes ======

3 Ways to query changes

  1.)  Changes Api
       - this will query the last two updates of an entity instance
       - i dont think this is what we need
  2.)  Shadow
       - this is querying an entity instance from the snapshots - OVERKILL at the moment

  3.)  Snapshot
       - This is what we need

 see PatientVersioningService.groovy for sample file

